fn my_first_interpreter(code: &str) -> String {
    let mut result: String = "".to_string();
    let mut counter: u8 = 0;
    for c in code.chars() {
        match c {
            '+' =>  counter = counter.wrapping_add(1),
            '.' => result.push(counter as char),
            _ => {},
        };
    }
    result
}

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn example_test_cases() {
        assert_eq!(my_first_interpreter("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+."), "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        assert_eq!(my_first_interpreterello, World!");
        assert_eq!(my_first_interpreter("++++++++++++++++++++++++++++++++++++.++++++.+.+.+++++.+.+"), "$*+,12");
        assert_eq!(my_first_interpreter("+++++++++++++++++++++++++++++++++++++++++++++++++++++++.+.+.+.+.++++.+.++.+.++++.+.+.+++.+.+.+."), "789:;?@BCGHILMNO");
        assert_eq!(my_first_interpreter("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.++++++++++.+++.asdadasdad++dsada.++"), ";EHJ");
        assert_eq!(my_first_interpreter("+++++++++++++++++!!!!!!+++++++++++++++++++++++++++asdadawdiquwodiqdqwd+++++++++++++++++++++.qd;kqwd;lqk+.+.+.+.+.+.+.+.+.+.+wqdl;kqwd;qwkdq;wld.+.+.+.+.+.+.+.+.+.+.+.+.+.+."), "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        assert_eq!(my_first_interpreter("+a+d+dw+1++d+ad+d+dw+++da++d++ad+++ad++a+aw++d+w+wd+1+r+qw+y+to++l+jd+hs+fa+3+y+s+ys+++asa+++hr+3+4+w+h+sn+x+x+tq+t+hd++ms++a+y+w+rj++m.+sd.hdf+j.jd+.+ey.weh+h.saa+.+asd.a+.d+s.d+.da+wd.aw+.21+t.hd+a.+.j+ad.h+sd.h+s.a+a.+.+.+.+.+.+."), "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        assert_eq!(my_first_interpreter("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.++++++.+.+.+++++.+.+"), "QWXY^_");
        assert_eq!(my_first_interpreter("++++++++++++++++++++++++++++++++++++++.++++++++++.++++++.+.A.+++.DD>....+.++++++.+.+.+++++.+.+"), "&0677:::::;ABCHI");
        assert_eq!(my_first_interpreter("++++++++++++++++++++++++++++++++++++..........++++++.+.+.+++++.+.+"), "$$$$$$$$$$*+,12");
    }
}