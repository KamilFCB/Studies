fn number(bus_stops:&[(i32,i32)]) -> i32 {
    bus_stops.iter().fold(0, |acc, &(x, y)| acc + x - y)
}



#[test]
fn returns_expected() {
    assert_eq!(number(&[(10,0),(3,5),(5,8)]), 5);
    assert_eq!(number(&[(3,0),(9,1),(4,10),(12,2),(6,1),(7,10)]), 17);
    assert_eq!(number(&[(13,0),(0,1),(2,11),(12,0),(4,1),(3,2)]), 19);
    assert_eq!(number(&[(3,0),(9,1),(4,8),(12,2),(6,1),(7,8)]), 21);
    assert_eq!(number(&[(3,0)]), 3);
    assert_eq!(number(&[(3,0),(49,1),(24,28),(12,12),(6,21),(7,18)]), 21);
    assert_eq!(number(&[(33,0),(19,1),(52,22),(22,5),(1,24),(7,8)]), 74);
    assert_eq!(number(&[(1,0),(0,1)]), 0);
    assert_eq!(number(&[(1,0),(1,0),(1,0),(1,0),(1,0)]), 5);
    assert_eq!(number(&[(1243,0),(19,124),(4124141,811),(11242,222412),(16,1124),(11147,118)]), 3923219);
}