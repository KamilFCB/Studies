fn zoom(n: i32) -> String {
    let mut line: String = "".to_string();
    if ((n+1) / 2) % 2 == 0 {
        for i in 0..n {
            line += "□";
        }
    } else {
        for i in 0..n {
            line += "■";
        }
    }
    let mut result: String = "".to_string();
    result += &line;
    result += &"\n".to_string();

    for i in 1..n {
        let mut index: i32 = 0;
        let mut new_line: String = "".to_string();
        for ch in line.chars() {
            if i < (n+1)/2 {
                if index < i || index > (n - i - 1) {
                    new_line.push(ch);
                } else {
                    if ch.to_string() == "■".to_string() {
                        new_line += "□";
                    } else {
                        new_line += "■";
                    }
                }
            } else {
                if index >= i || index <= (n - i - 1) {
                    new_line.push(ch);
                } else {
                    if ch.to_string() == "■".to_string() {
                        new_line += "□";
                    } else {
                        new_line += "■";
                    }
                }
            }
            index += 1;
        }
        line = new_line;
        result += &line;
        result += &"\n".to_string();
    }
    println!("{}", result);
    result.trim_end().to_string()
}

fn main() {
    zoom(51);
}

#[test]
fn basic_test_1() {
    assert_eq!(zoom(1), "■");
}

#[test]
fn basic_test_2() {
    assert_eq!(zoom(3), "\
□□□
□■□
□□□"
    );
}

#[test]
fn basic_test_3() {
    assert_eq!(zoom(5), "\
■■■■■
■□□□■
■□■□■
■□□□■
■■■■■"
    );
}

#[test]
fn basic_test_4() {
    assert_eq!(zoom(7), "\
□□□□□□□
□■■■■■□
□■□□□■□
□■□■□■□
□■□□□■□
□■■■■■□
□□□□□□□"
    );
}

#[test]
fn basic_test_5() {
    assert_eq!(zoom(9), "\
■■■■■■■■■
■□□□□□□□■
■□■■■■■□■
■□■□□□■□■
■□■□■□■□■
■□■□□□■□■
■□■■■■■□■
■□□□□□□□■
■■■■■■■■■"
    );
}

#[test]
fn basic_test_6() {
    assert_eq!(zoom(11), "\
□□□□□□□□□□□
□■■■■■■■■■□
□■□□□□□□□■□
□■□■■■■■□■□
□■□■□□□■□■□
□■□■□■□■□■□
□■□■□□□■□■□
□■□■■■■■□■□
□■□□□□□□□■□
□■■■■■■■■■□
□□□□□□□□□□□"
    );
}

#[test]
fn basic_test_7() {
    assert_eq!(zoom(13), "\
■■■■■■■■■■■■■
■□□□□□□□□□□□■
■□■■■■■■■■■□■
■□■□□□□□□□■□■
■□■□■■■■■□■□■
■□■□■□□□■□■□■
■□■□■□■□■□■□■
■□■□■□□□■□■□■
■□■□■■■■■□■□■
■□■□□□□□□□■□■
■□■■■■■■■■■□■
■□□□□□□□□□□□■
■■■■■■■■■■■■■"
    );
}

#[test]
fn basic_test_8() {
    assert_eq!(zoom(15), "\
□□□□□□□□□□□□□□□
□■■■■■■■■■■■■■□
□■□□□□□□□□□□□■□
□■□■■■■■■■■■□■□
□■□■□□□□□□□■□■□
□■□■□■■■■■□■□■□
□■□■□■□□□■□■□■□
□■□■□■□■□■□■□■□
□■□■□■□□□■□■□■□
□■□■□■■■■■□■□■□
□■□■□□□□□□□■□■□
□■□■■■■■■■■■□■□
□■□□□□□□□□□□□■□
□■■■■■■■■■■■■■□
□□□□□□□□□□□□□□□"
    );
}

#[test]
fn basic_test_9() {
    assert_eq!(zoom(17), "\
■■■■■■■■■■■■■■■■■
■□□□□□□□□□□□□□□□■
■□■■■■■■■■■■■■■□■
■□■□□□□□□□□□□□■□■
■□■□■■■■■■■■■□■□■
■□■□■□□□□□□□■□■□■
■□■□■□■■■■■□■□■□■
■□■□■□■□□□■□■□■□■
■□■□■□■□■□■□■□■□■
■□■□■□■□□□■□■□■□■
■□■□■□■■■■■□■□■□■
■□■□■□□□□□□□■□■□■
■□■□■■■■■■■■■□■□■
■□■□□□□□□□□□□□■□■
■□■■■■■■■■■■■■■□■
■□□□□□□□□□□□□□□□■
■■■■■■■■■■■■■■■■■"
    );
}

#[test]
fn basic_test_10() {
    assert_eq!(zoom(51), "\
□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□
□■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■□
□■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■□
□■□■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■□■□
□■□■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■□■□
□■□■□■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■□■□■□
□■□■□■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■□■□■□
□■□■□■□■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■□■□■□■□
□■□■□■□■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■□■□■□■□
□■□■□■□■□■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■□■□■□■□■□
□■□■□■□■□■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■□■□■□■□■□
□■□■□■□■□■□■■■■■■■■■■■■■■■■■■■■■■■■■■■■■□■□■□■□■□■□
□■□■□■□■□■□■□□□□□□□□□□□□□□□□□□□□□□□□□□□■□■□■□■□■□■□
□■□■□■□■□■□■□■■■■■■■■■■■■■■■■■■■■■■■■■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□□□□□□□□□□□□□□□□□□□□□□□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■■■■■■■■■■■■■■■■■■■■■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■□□□□□□□□□□□□□□□□□□□■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■□■■■■■■■■■■■■■■■■■□■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■□■□□□□□□□□□□□□□□□■□■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■□■□■■■■■■■■■■■■■□■□■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■□■□■□□□□□□□□□□□■□■□■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■□■□■□■■■■■■■■■□■□■□■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■□■□■□■□□□□□□□■□■□■□■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■□■□■□■□■■■■■□■□■□■□■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■□■□■□■□■□□□■□■□■□■□■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■□■□■□■□■□■□■□■□■□■□■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■□■□■□■□■□□□■□■□■□■□■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■□■□■□■□■■■■■□■□■□■□■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■□■□■□■□□□□□□□■□■□■□■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■□■□■□■■■■■■■■■□■□■□■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■□■□■□□□□□□□□□□□■□■□■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■□■□■■■■■■■■■■■■■□■□■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■□■□□□□□□□□□□□□□□□■□■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■□■■■■■■■■■■■■■■■■■□■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■□□□□□□□□□□□□□□□□□□□■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□■■■■■■■■■■■■■■■■■■■■■□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■□□□□□□□□□□□□□□□□□□□□□□□■□■□■□■□■□■□■□
□■□■□■□■□■□■□■■■■■■■■■■■■■■■■■■■■■■■■■□■□■□■□■□■□■□
□■□■□■□■□■□■□□□□□□□□□□□□□□□□□□□□□□□□□□□■□■□■□■□■□■□
□■□■□■□■□■□■■■■■■■■■■■■■■■■■■■■■■■■■■■■■□■□■□■□■□■□
□■□■□■□■□■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■□■□■□■□■□
□■□■□■□■□■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■□■□■□■□■□
□■□■□■□■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■□■□■□■□
□■□■□■□■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■□■□■□■□
□■□■□■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■□■□■□
□■□■□■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■□■□■□
□■□■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■□■□
□■□■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■□■□
□■□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□■□
□■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■□
□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□"
    );
}