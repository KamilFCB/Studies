#lang racket

(define (dist x y)
  (abs (- x y)))

(define (inc x)
  (+ x 1))


(define (cont-frac n d )
  (define (iter x an-1 an-2 bn-1 bn-2 fk-1)
    (let ([an (+ (* (d x) an-1) (* (n x) an-2))]
          [bn (+ (* (d x) bn-1) (* (n x) bn-2))])
          (let ([fk (/ an bn)])
    (if (< (dist fk fk-1) 0.00000000001)
        fk
        (iter (inc x) an an-1 bn bn-1 fk)))))    
  (iter 1 0.0 1.0 1.0 0.0 0.0))

(cont-frac (lambda (i) 1.0 ) (lambda (i) 1.0))
(cont-frac (lambda(i) i) (lambda(i) (+ i 2)))
(+ 3 (cont-frac (lambda (x) 4.0) (lambda (x) 6.0)))
(cont-frac (lambda (x) x) (lambda (x) x))
(+ 4 (cont-frac (lambda (x) 2.0) (lambda (x) 8.0)))
( cont-frac ( lambda (i) i) ( lambda (i) i))
(cont-frac (lambda (x) 4.0) (lambda (x) 6.0))
